apply plugin: 'com.android.application'
apply plugin: 'kotlin-android'
apply plugin: 'kotlin-android-extensions'
apply plugin: 'kotlin-kapt'

android {
    compileSdkVersion build_versions.target_sdk
    buildToolsVersion build_versions.build_tools

    defaultConfig {
        applicationId "com.wyq.firehelper"
        minSdkVersion build_versions.min_sdk
        targetSdkVersion build_versions.target_sdk
        versionCode 1
        versionName "1.0"
        testInstrumentationRunner "androidx.test.runner.AndroidJUnitRunner"

        vectorDrawables.useSupportLibrary = true

        flavorDimensions "versionCode"
        multiDexEnabled true

        //指定room.schemaLocation生成的文件路径
        javaCompileOptions {
            annotationProcessorOptions {
                arguments = ["room.schemaLocation": "$projectDir/schemas".toString()]
            }
        }
    }
    buildTypes {
        release {
            minifyEnabled true
            shrinkResources true
            proguardFiles getDefaultProguardFile('proguard-android.txt'), 'proguard-rules.pro'
        }
    }

    dataBinding {
        enabled true
    }

    productFlavors {
        dev {
            // dev utilizes minSDKVersion = 21 to allow the Android gradle plugin
            // to pre-dex each module and produce an APK that can be tested on
            // Android Lollipop without time consuming dex merging processes.
            minSdkVersion 21
        }

        prod {
            // The actual minSdkVersion for the application.
            minSdkVersion 14
        }
    }

    compileOptions {
        targetCompatibility 1.8
        sourceCompatibility 1.8
    }
}

//为Dagger创建了需要的自生成类
kapt {
    generateStubs = true
}

dependencies {
    implementation fileTree(include: ['*.jar'], dir: 'libs')

    // Support libraries
    implementation deps.support.material
    implementation deps.support.v4
    implementation deps.support.appcompat
    implementation deps.support.cardview
    implementation deps.support.recyclerview
    implementation deps.constraint_layout

    // Android Testing Support Library's runner and rules
//    implementation 'androidx.appcompat:appcompat:1.0.0-alpha1'
//    implementation 'androidx.constraintlayout:constraintlayout:1.1.2'
    androidTestImplementation deps.atsl.runner
    androidTestImplementation deps.atsl.rules
    androidTestImplementation deps.room.testing
    androidTestImplementation deps.arch_core.testing
    testImplementation deps.mockito.core, { exclude group: 'net.bytebuddy' }
    androidTestImplementation deps.mockito.android

    // Espresso UI Testing
    androidTestImplementation deps.espresso.core
    androidTestImplementation deps.espresso.contrib
    androidTestImplementation deps.espresso.intents

    // Resolve conflicts between main and test APK:
    androidTestImplementation deps.support.annotations
    androidTestImplementation deps.support.v4
    androidTestImplementation deps.support.appcompat
    androidTestImplementation deps.support.material

    implementation deps.emoji

    implementation deps.multidex

    implementation deps.kotlin.stdlib

    implementation deps.room.runtime
    implementation deps.room.rxjava2
    kapt deps.room.compiler

    implementation deps.lifecycle.runtime
    implementation deps.lifecycle.extensions
    implementation deps.lifecycle.java8
    kapt deps.lifecycle.compiler

    implementation deps.gson

    implementation deps.retrofit.runtime
    implementation deps.retrofit.gson
    implementation deps.retrofit.rxjava2
    implementation deps.okhttp_logging_interceptor

    implementation deps.rxjava2
    implementation deps.rx_android

    implementation deps.butterknife.runtime
    kapt deps.butterknife.compiler

    implementation deps.dagger.runtime
    kapt deps.dagger.compiler

    implementation deps.glide.runtime
    kapt deps.glide.compiler

    implementation deps.picasso

    implementation deps.eventbus

    implementation deps.logger

    implementation deps.fragmentation.runtime
    implementation deps.fragmentation.swipeback

    debugImplementation deps.leakcanary.runtime
    releaseImplementation deps.leakcanary.no_op
    // Optional, if you use support library fragments:
    debugImplementation deps.leakcanary.support_fragment

    implementation deps.tagview
    implementation deps.photoview

    implementation deps.mmkv

    implementation 'com.yanzhikai:TextPathView:0.1.3'

    implementation 'cn.jzvd:jiaozivideoplayer:6.4.0'
    implementation 'tv.danmaku.ijk.media:ijkplayer-java:0.8.8'
    implementation 'tv.danmaku.ijk.media:ijkplayer-armv7a:0.8.8'
    implementation 'tv.danmaku.ijk.media:ijkplayer-arm64:0.8.8'
    implementation 'tv.danmaku.ijk.media:ijkplayer-exo:0.8.8'
    implementation 'com.github.ctiao:DanmakuFlameMaster:0.9.25'
    implementation 'com.github.ctiao:ndkbitmap-armv7a:0.9.21'

    //AspectJ
    implementation deps.aspectj.rt

//    implementation('com.alibaba.android:ultraviewpager:1.0.7.7@aar') {
//        transitive = true
//    }
    implementation('com.alibaba.android:tangram:3.1.4@aar') {
        transitive = true
    }

    implementation project(':fireapt')
    implementation project(':fireapt-annotation')
    kapt project(':fireapt-compiler')
}
repositories {
    mavenCentral()
}


import org.aspectj.bridge.IMessage
import org.aspectj.bridge.MessageHandler
import org.aspectj.tools.ajc.Main

final def log = project.logger
final def variants = project.android.applicationVariants

variants.all { variant ->
    if (!variant.buildType.isDebuggable()) {
        log.debug("Skipping non-debuggable build type '${variant.buildType.name}'.")
        return;
    }

    JavaCompile javaCompile = variant.javaCompile
    javaCompile.doLast {
        String[] args = ["-showWeaveInfo",
                         "-1.8",
                         "-inpath", javaCompile.destinationDir.toString(),
                         "-aspectpath", javaCompile.classpath.asPath,
                         "-d", javaCompile.destinationDir.toString(),
                         "-classpath", javaCompile.classpath.asPath,
                         "-bootclasspath", project.android.bootClasspath.join(File.pathSeparator)]
        log.debug "ajc args: " + Arrays.toString(args)

        MessageHandler handler = new MessageHandler(true);
        new Main().run(args, handler);
        for (IMessage message : handler.getMessages(null, true)) {
            switch (message.getKind()) {
                case IMessage.ABORT:
                case IMessage.ERROR:
                case IMessage.FAIL:
                    log.error message.message, message.thrown
                    break;
                case IMessage.WARNING:
                    log.warn message.message, message.thrown
                    break;
                case IMessage.INFO:
                    log.info message.message, message.thrown
                    break;
                case IMessage.DEBUG:
                    log.debug message.message, message.thrown
                    break;
            }
        }
    }
}
